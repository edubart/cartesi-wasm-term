require 'cartesi'

--------------------------------------------------------------------------------

-- Macro to check if a cm_* call was a success.
## function cm_assert(callnode)
  do
    local errmsg: cstring
    -- appends `errmsg` to the call arguments of `a`
    ## local callargs, callname = callnode[1], callnode[2][1]
    ## table.insert(callargs, aster.UnaryOp{"ref", aster.Id{"errmsg"}})
    local result: auto = #[callnode]#
    if errmsg then
      error(#[callname..': ']#..errmsg)
    elseif result ~= 0 then
      error(#[callname..': failed']#)
    end
  end
## end

--------------------------------------------------------------------------------

-- Machine.
global CartesiMachine = @record{
  machine: *cm_machine,
}

local defconfig: *cm_machine_config

function CartesiMachine.get_default_config(): cm_machine_config
  if not defconfig then
    cm_assert!(cm_get_default_config(&defconfig))
  end
  return $defconfig
end

-- Creates a new machine.
function CartesiMachine.create(config: *cm_machine_config): CartesiMachine
  -- create the machine
  local self: CartesiMachine
  cm_assert!(cm_create_machine(config, cm_machine_runtime_config{}, &self.machine))
  return self
end

-- Destroy the machine.
function CartesiMachine:destroy(): void
  cm_delete_machine(self.machine)
  $self = {}
end

-- Check if the machine is halted.
function CartesiMachine:is_halted(): boolean
  local halted: boolean
  cm_assert!(cm_read_iflags_H(self.machine, &halted))
  return halted
end

-- Get machine yield reason.
function CartesiMachine:read_yield_reason(): uint32
  local data: uint64
  cm_assert!(cm_read_htif_tohost_data(self.machine, &data))
  return data >> 32
end

-- Get machine mcycle.
function CartesiMachine:read_mcycle(): uint64
  local mcycle: uint64
  cm_assert!(cm_read_mcycle(self.machine, &mcycle))
  return mcycle
end

-- Read machine memory.
function CartesiMachine:read_memory(paddr: uint64, dest: span(byte)): void
  cm_assert!(cm_read_memory(self.machine, paddr, dest.data, dest.size))
end

-- Write machine memory.
function CartesiMachine:write_memory(paddr: uint64, dest: span(byte)): void
  cm_assert!(cm_write_memory(self.machine, paddr, dest.data, dest.size))
end

-- Run the machine.
function CartesiMachine:run(): CM_BREAK_REASON
  -- run the machine
  local break_reason: CM_BREAK_REASON
  cm_assert!(cm_machine_run(self.machine, (@uint64)(-1), &break_reason))
  -- return break reason
  return break_reason
end
